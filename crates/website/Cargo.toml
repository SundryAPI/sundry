[package]
name = "website"
version = "0.1.0"
edition.workspace = true
license.workspace = true
description.workspace = true
repository.workspace = true

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = { workspace = true, optional = true }
async-openai = { workspace = true, optional = true }
axum = { workspace = true, optional = true, features = ["ws"] }
dotenvy = { workspace = true, optional = true }
futures.workspace = true
regex = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true }
serde.workspace = true
serde_json.workspace = true
sqlx = { workspace = true, optional = true }
thiserror.workspace = true
tokio = { workspace = true, optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, optional = true }
tracing = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true }
uuid = { workspace = true, optional = true }
chrono.workspace = true

models = { path = "../models" }
github_types = { path = "../github_types" }

cookie = { version = "0.18", optional = true }
time = { version = "0.3", features = ["formatting"], optional = true }
console_error_panic_hook = "0.1"
leptos = { version = "0.7", features = ["tracing"] }
leptos_axum = { version = "0.7", optional = true }
leptos_meta = { version = "0.7" }
leptos_router = { version = "0.7" }
send_wrapper = { version = "0.6" }
wasm-bindgen = "0.2"
http = "1"
rusty_paseto = { version = "0.5.0", features = [
    "batteries_included",
    "v4_local",
], optional = true }
markdown = "1.0.0-alpha.21"

# web-sys is a dependency of Leptos but we want more features
web-sys = { version = "0.3", features = ["Element", "Navigator", "Clipboard"] }
sendgrid = "0.23.0"

[build-dependencies]
dotenvy.workspace = true

[features]
default = ["csr"]
csr = ["leptos/csr"]
hydrate = ["leptos/hydrate"]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:tracing",
    "dep:sqlx",
    "dep:cookie",
    "dep:uuid",
    "dep:rusty_paseto",
    "dep:reqwest",
    "dep:dotenvy",
    "models/ssr",
    "dep:time",
    "dep:tracing",
    "dep:tracing-subscriber",
    "dep:regex",
    "dep:async-openai",
    "dep:anyhow",
]

[package.metadata.cargo-all-features]
denylist = ["axum", "tower", "tower-http", "tokio", "http", "leptos_axum"]
skip_feature_sets = [["csr", "ssr"], ["csr", "hydrate"], ["ssr", "hydrate"]]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "website"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# [Optional] Activates the tailwind build
tailwind-input-file = "style/tailwind.css"
# [Optional] Files in the asset-dir will be copied to the site-root directory
assets-dir = "public"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
end2end-cmd = "npx playwright test"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

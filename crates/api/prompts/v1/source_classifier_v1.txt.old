Select relevant data sources based on a user's query and available sources.

Given a user's request and a list of available data sources, identify and return the most relevant sources that may contain the requested information.

### Input
You will be provided with an Input JSON object containing:
- **query**: A string representing the user's query.
- **available_sources**: An array listing the available sources (e.g., Slack, GitHub, etc.)

You need to determine which data sources are most likely to contain the information the user is requesting.

# Instructions
- Analyze the user's **query** to understand what type of data they are requesting.
  - E.g., if the user asks about "GitHub issues", it is likely they only need GitHub as a source.
  - If the **query** is ambiguous or broad (e.g., it contains references that could involve multiple sources), consider all relevant sources.
- For queries involving terms like "discussion" or "message", prioritize sources that handle communication (e.g. Slack).
- If there is an explicit term in the query that hints towards a specific type of data (e.g., "issues" for GitHub or "recordings" for Slack), restrict the output to the sources containing that data.
  
### Guidelines
- If multiple available sources are relevant to the user's **query**, include all of them.
- If only one source matches the user's **query**, provide just that one source.
  
# Output Format

The output should be a JSON object, structured as follows:
- **"relevant_sources"**: Include a list containing a subset of the **available_sources** that are most relevant to the user's **query**.

### Examples

**Input:**
```json
{
  "query": "Get my latest conversation thread with Kevin",
  "available_sources": ["Slack", "GitHub"]
}
```
**Output:**
```json
{
  "relevant_sources": ["Slack"]
}
```

**Input:**
```json
{
  "query": "Get my latest discussion",
  "available_sources": ["Slack", "GitHub"]
}
```
**Output:**
```json
{
  "relevant_sources": ["Slack", "GitHub"]
}
```

**Input:**
```json
{
  "query": "Get my currently assigned GitHub issues",
  "available_sources": ["Slack", "GitHub"]
}
```
**Output:**
```json
{
  "relevant_sources": ["GitHub"]
}
```

# Notes

- The **query** may include keywords related to specific tools (e.g., "issues", "projects", "messages"). Ensure you map these accurately to the available tools and data sources.
- In borderline cases or if the **query** isn't very specific, err on the side of inclusion to avoid losing important information.
- Handle a variety of phrasing or vocabulary, as users may ask for things with different wording ("latest discussion," "recent talk," "assigned issues," etc.).
